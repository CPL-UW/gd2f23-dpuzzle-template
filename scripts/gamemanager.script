require 'scripts/utils'

function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
	msg.post(".", "acquire_input_focus")
	self.boxWidth = X_COLS
	self.boxHeight = Y_ROWS
	self.matrix = tetris_random_board(self.boxWidth,self.boxHeight)
	self.piece = tetris_random_piece(self.matrix)
	self.ticks = 0
	make_board(self)
end

function make_spot(self, i, j)
	local p = go.get_position()
	p.x = i2x(i)
	p.y = j2y(j)
	p.z = 0.5
	local component = "#spotfactory"
	local id = factory.create(component, p)
	return id
end


function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
	self.ticks = (self.ticks + 1) % 60
	if 0 == self.ticks % 20 then
		do_tick(self)
	end
	update_board(self)	
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function make_board(self)
	self.board = make_matrix(self.boxWidth, self.boxHeight, false)
	for j=1,#self.matrix[1] do
		for i=1,#self.matrix do
			local id = make_spot(self, i, j)
			self.board[i][j] = id
		end
	end
	self.walls = {}
	for j=1,#self.matrix[1] do
		local leftid = make_spot(self, 0, j)
		local rightid = make_spot(self, #self.matrix + 1, j)
		table.insert(self.walls, leftid)
		table.insert(self.walls, rightid)
		msg.post(leftid, "play_animation", {id = hash("box_x")})
		msg.post(rightid, "play_animation", {id = hash("box_x")})
	end
end

-- turn spots visible, invisible, or different animation, depending.
function update_board(self)
	for j=1,#self.matrix[1] do
		for i=1,#self.matrix do
			local cell = self.board[i][j]
			if (self.matrix[i][j]) then
				msg.post(cell, "enable")
				msg.post(cell, "play_animation", {id = hash("box_black")})
			else
				msg.post(cell, "disable")
			end
		end
	end
	if self.piece then
		for n=1,#self.piece do
			local pxy = self.piece[n]
			local cell = self.board[pxy.x][pxy.y]
			msg.post(cell, "enable")
			msg.post(cell, "play_animation", {id = hash("box_white")})
		end
	end
end

function do_tick(self)
	if tetris_kill_lines(self.matrix) then
		print("killing a line")
	elseif not self.piece then
		self.piece = tetris_random_piece(self.matrix)
	elseif not tetris_move_piece(self.matrix,self.piece,0,-1) then
		if self.piece then
			print("place piece")
			tetris_place_piece(self.matrix,self.piece)
			self.piece = false
		end
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
	if action.released then
		if action_id == hash("left") then
			tetris_move_piece(self.matrix,self.piece,-1,0)
		elseif action_id == hash("right") then
			tetris_move_piece(self.matrix,self.piece,1,0)
		elseif action_id == hash("down") then
			print(table2string(self.matrix))
		elseif action_id == hash("up") then
			tetris_rotate_piece(self.matrix, self.piece)
		end
		-- do_tick(self)
		-- draw_board(self)
	end

end

function update(self,dt)

end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

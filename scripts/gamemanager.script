require 'scripts/utils'

function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
	msg.post(".", "acquire_input_focus")
	self.spots = {}
	self.boxWidth = 5
	self.boxHeight = 8
	self.matrix = tetris_random_board() -- make_matrix(self.boxWidth,self.boxHeight,false)
	self.piece = tetris_random_piece()
	self.spots = {}
end

function make_spot(self, i, j)
	local p = go.get_position()
	p.x = i2x(i)
	p.y = j2y(j)
	p.z = 0.5
	local component = "#spotfactory"
	local id = factory.create(component, p)
	return id
end

function make_new_random_spot(self)
	local p = go.get_position()
	p.x = 100 * math.ceil(math.random(0,10))
	p.y = 100 * math.ceil(math.random(0,10))
	p.z = 0.5
	local component = "#spotfactory"
	local id = factory.create(component, p)
	return id
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function move_random_spot(self)
	local id = self.spots[ math.random( 1, #self.spots ) ]
	local pos = go.get_position(id)
	pos.x = pos.x + math.random(-10.0,10.0)
	pos.y = pos.y + math.random(-10.0,10.0)
	go.set_position(pos,id)
end

function draw_board(self)
	go.delete(self.spots)
	self.spots = {}
	for j=1,#self.matrix[1] do
		for i=1,#self.matrix do
			if (self.matrix[i][j]) then
				local id = make_spot(self, i, j)
				table.insert(self.spots, id)
			end
		end
	end
	for n=1,#self.piece do
		local pxy = self.piece[n]
		local id = make_spot(self, pxy.x, pxy.y)
		table.insert(self.spots, id)
		msg.post(id, "play_animation", {id = hash("box_white")})
	end
end

function do_tick(self)
	if not self.piece then
		self.piece = tetris_random_piece()
	end
	if tetris_tick(self.matrix,self.piece) then
		print("tick")
	elseif self.piece then
		print("place piece")
		tetris_place_piece(self.matrix,self.piece)
		self.piece = false
	end
		
	draw_board(self)
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
	if action_id == hash("right") then
		do_tick(self)
	-- elseif action_id == hash("left") then
	-- 	tetris_tick(self.matrix,self.currentPiece)
	-- elseif action_id == hash("up") then
	-- 	tetris_place_piece(self.matrix, self.currentPiece)
	-- 	self.currentPiece = tetris_random_piece()
	end

	-- 	if (#self.spots < 5) then
	-- 		local id = make_new_random_spot(self)
	-- 		table.insert(self.spots, id)
	-- 	else
	-- 		move_random_spot(self)			
	-- 	end
	-- end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
